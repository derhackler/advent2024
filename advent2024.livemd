# Advent 2024

```elixir
Mix.install([
  {:req, "~> 0.5.8"}
])
```

## Introduction

To run, set the SESSION livebook variable to the value of the session cookie that you find on the advent of code homepage.

## Utils

```elixir
defmodule Input do
  def for_day(day) do
    fname = Path.join(__DIR__,"day#{dayformat(day)}.txt")
    
    if (File.exists?(fname)) do
      File.read!(fname)
    else
      headers = [cookie: "session=" <> System.get_env("LB_SESSION")]
      input = Req.get!("https://adventofcode.com/2024/day/#{day}/input",headers: headers).body
      File.write!(fname,input)
      input
    end
  end

  defp dayformat(day) when day < 10, do: "0#{day}"
  defp dayformat(day), do: "#{day}"
    
end
```

<!-- livebook:{"branch_parent_index":1} -->

## Day 1

```elixir
example = """
3   4
4   3
2   5
1   3
3   9
3   3
"""
```

```elixir
defmodule Day1 do
  def solve(input, :part1) do
    {l1,l2} = parse(input)
    l1 = Enum.sort(l1)
    l2 = Enum.sort(l2)

    Enum.zip(l1,l2)
    |> Enum.map(fn {a,b} -> abs(a-b) end)
    |> Enum.sum()
  end

  def solve(input, :part2) do
    {l1,l2} = parse(input)
    freq = Enum.frequencies(l2)
    Enum.reduce(l1,0,fn a,acc -> acc + a * Map.get(freq,a,0) end)
  end

  def parse(input) do
    {l1,l2} = input
    |> String.split("\n", trim: true)
    |> Enum.map(&String.split(&1, " ", trim: true))
    |> Enum.reduce({[],[]},fn [a,b], {lista,listb} -> {[a|lista], [b|listb]} end)

    {l1 |> Enum.map(&String.to_integer/1), l2 |> Enum.map(&String.to_integer/1)}
  end
end
```

```elixir
example |> Day1.solve(:part1)
```

```elixir
Input.for_day(1) |> Day1.solve(:part1)
```

```elixir
example |> Day1.solve(:part2)
```

```elixir
Input.for_day(1) |> Day1.solve(:part2)
```

#### Better solutions (after I've completed mine):

* Use of `Enum.unzip` [link](https://github.com/evertvanaart/advent2024/blob/main/lib/solutions/day01/common.ex)
* Just multiplying frequencies directly [link](https://github.com/evertvanaart/advent2024/blob/main/lib/solutions/day01/day01b.ex)

<!-- livebook:{"branch_parent_index":1} -->

## Day 2

```elixir
example = """
7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9
"""
```

```elixir
defmodule Day2 do
  def solve(input, :part1) do
    parse(input)
    |> Stream.filter(fn report -> valid?(:unknown, hd(report), true, tl(report) ) end)
    |> Enum.count()
  end

  def solve(input, :part2) do
    parse(input)
    |> Stream.filter(&valid_with_dampening?/1)
    |> Enum.count()
  end



  def valid?(direction, prev, valid?, report)
  def valid?(_direction,_prev,valid?,[]), do: valid?
  def valid?(_direction,_prev,false,_), do: false
  def valid?(direction,prev,_valid?,[num|rest]) do
    case direction do
      :unknown -> valid?(direction(prev,num),num,valid_difference?(prev,num),rest)
      :asc -> valid?(:asc,num,valid_difference?(prev,num) && prev < num, rest)
      :desc -> valid?(:desc,num,valid_difference?(prev,num) && prev > num, rest)
    end
  end

  def valid_with_dampening?(report) do
    attempts = length(report)
    Enum.reduce_while(0..attempts - 1, false, fn attempt, _acc -> 
        report = remove_idx(report,attempt)
        case valid?(:unknown,hd(report),true,tl(report)) do
          true -> {:halt, true}
          false -> {:cont, false}
        end
    end)
  end

  defp remove_idx(enum, idx) do
    {a,b} = Enum.split(enum,idx)
    a ++ Enum.drop(b,1)
  end

  defp direction(val1,val2) do
    cond do
      val1 > val2 -> :desc
      val2 > val1 -> :asc
      :else -> :unknown
    end
  end

  def valid_difference?(val1,val2) do
    abs(val1 - val2) < 4 && abs(val1 - val2) != 0
  end
  

  def parse(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(&String.split/1)
    |> Enum.map(fn nums ->
        Enum.map(nums,&String.to_integer/1)
      end)
  end
end
```

```elixir
example |> Day2.solve(:part1)
```

```elixir
Input.for_day(2) |> Day2.solve(:part1)
```

```elixir
example |> Day2.solve(:part2)
```

```elixir
Input.for_day(2) |> Day2.solve(:part2)
```

#### Learning from others

* There exists a `List.delete_at` function...
* It's possible to pipe into a `case` statement. [link](https://elixirforum.com/t/advent-of-code-2024-day-2/67804/5)

<!-- livebook:{"branch_parent_index":1} -->

## Day 3

```elixir
example = "xmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))"
```

```elixir
defmodule Day3 do
  def solve(input,:part1) do
    parse(input,:mul,[],[])
    |> Enum.map(fn 
      [a,b] -> a*b
      _other -> 0
    end)
    |> Enum.sum()
  end

  def solve(input, :part2) do
    input
    |> parse(:mul,[],[])
    |> Enum.reverse()
    |> Enum.reduce({:do,[]}, fn 
      :do,{_,nums} -> {:do,nums}
      :dont,{_,nums} -> {:dont,nums}
      _elem,{:dont,nums} -> {:dont,nums}
      elem,{:do,nums} -> {:do,[elem|nums]}
    end)
    |> then(fn {_,nums} -> nums end)
    |> Enum.map(fn [a,b] -> a*b end)
    |> Enum.sum()
  end

  # grammar: :mul,:int,:comma_or_brace,:int,:comma_or_brace

  def parse("mul(" <> rest,:mul,_temp,acc), do: parse(rest, :int, [], acc)
  def parse("do()" <> rest,:mul,_temp,acc), do: parse(rest, :mul, [], [:do|acc])
  def parse("don't()" <> rest, :mul,_temp,acc), do: parse(rest, :mul, [], [:dont|acc])
  
  def parse(val,:int, temp, acc) do
    case Integer.parse(val) do
      :error -> parse(val, :mul, [], acc)
      {num,rest} when num < 1000 and num >= 0 -> parse(rest, :comma_or_brace, [num|temp], acc)
      {_num,rest} -> parse(rest, :mul, [], acc)
    end
  end
  
  def parse("," <> rest,:comma_or_brace,[_num]=temp,acc), do: parse(rest, :int, temp, acc)
  def parse(")" <> rest,:comma_or_brace,[_num,_num2]=temp,acc), do: parse(rest, :mul, [], [temp|acc])

  def parse(<<_something_unexpected, rest::binary>>,_any,_temp,acc), do: parse(rest, :mul, [], acc)
  def parse("",_,_,acc), do: acc

end
```

```elixir
example |> Day3.solve(:part1)
```

```elixir
Input.for_day(3) |> Day3.solve(:part1)
```

```elixir
example = "xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))"
example |> Day3.solve(:part2)
```

```elixir
Input.for_day(3) |> Day3.solve(:part2)
```

#### Learning from others

* `Regex.scan(~r/mul\((\d{1,3}),(\d{1,3})\)/, input, capture: :all_but_first)` using `:all_but_first` to get only the groups and not the full match. [link](https://elixirforum.com/t/advent-of-code-2024-day-3/67837/2)

* `(?<=mul\()` Regex look behind group that does not get catpured. [link](https://elixirforum.com/t/advent-of-code-2024-day-3/67837/5)

* Very nice solution using nimble parse. [link](https://elixirforum.com/t/advent-of-code-2024-day-3/67837/22)

* Elegant regex based using `Regex.scan` [link](https://elixirforum.com/t/advent-of-code-2024-day-3/67837/49)

<!-- livebook:{"branch_parent_index":1} -->

## Day 4

```elixir
example = """
MMMSXXMASM
MSAMXMSMSA
AMXSXMAAMM
MSAMASMSMX
XMASAMXAMM
XXAMMXXAMA
SMSMSASXSS
SAXAMASAAA
MAMMMXMMMM
MXMXAXMASX
"""
```

```elixir
defmodule Day4 do
  def solve(input, :part1) do
    grid = input |> parse()

    list = for {{x,y},a} <- grid, a == "X", direction <- 0..7 do
      is?(grid,{x,y},direction,"XMAS")
    end

    list 
    |> Enum.count(fn x -> x == true end)
    
  end

  def solve(input, :part2) do
    grid = input |> parse()

    list = for {pos,a} <- grid, a == "A" do
      (is?(grid,next(7,pos),3,"MAS") || is?(grid,next(3,pos),7,"MAS")) &&
      (is?(grid,next(1,pos),5,"MAS") || is?(grid,next(5,pos),1,"MAS"))
    end

    list 
    |> Enum.count(fn x -> x == true end)
  end

  def is?(grid,start,direction,search) do
      iter(grid,start,direction)
      |> Enum.take(String.length(search))
      |> Enum.join()
      |> then(fn word -> word == search end)
  end

  def iter(grid,startpos,direction) do
    Stream.resource(
      fn -> startpos end,
      fn pos -> case Map.get(grid,pos) do
          nil -> {:halt,pos}
          val -> {[val],next(direction,pos)}
        end
      end,
      fn _ -> nil end
    )
  end

  defp next(direction,{x,y}=_position) do
    # 0 is north, 1 is northeast, etc.
    case direction do
      0 -> {x,y-1}
      1 -> {x+1,y-1}
      2 -> {x+1,y}
      3 -> {x+1,y+1}
      4 -> {x,y+1}
      5 -> {x-1,y+1}
      6 -> {x-1,y}
      7 -> {x-1,y-1}
    end
  end


  
  def parse(binary), do: parse(binary,{0,0},[])
  def parse(binary,position,acc)
  def parse(<<>>,_pos,acc), do: Enum.into(acc,%{})
  def parse("\n" <> rest,{_x,y},acc), do: parse(rest,{0,y+1},acc)
  def parse(<<a,rest::binary>>,{x,y},acc) when a in ~c(XMAS) do
    parse(rest,{x+1,y},[{{x,y},<<a>>} | acc])
  end
  def parse(<<_a,rest::binary>>,{x,y},acc), do: parse(rest,{x+1,y},acc)

end
```

```elixir
example |> Day4.solve(:part1)
```

```elixir
Input.for_day(4) |> Day4.solve(:part1)
```

```elixir
example |> Day4.solve(:part2)
```

```elixir
Input.for_day(4) |> Day4.solve(:part2)
```

#### Learnings from others

* cool idea to indicate the directions: `↑↗→↘` [link](https://elixirforum.com/t/advent-of-code-2024-day-4/67869/9)
* use of the `:array.get` module
* matrix rotation [link](https://elixirforum.com/t/advent-of-code-2024-day-4/67869/19)
* nice way on how to build the grid [link](https://elixirforum.com/t/advent-of-code-2024-day-4/67869/4):

<!-- livebook:{"force_markdown":true} -->

```elixir
charlists = puzzle_input |> String.split() |> Enum.map(&String.to_charlist/1)

grid =
  for {row, i} <- Enum.with_index(charlists),
      {char, j} <- Enum.with_index(row),
      into: %{},
      do: {{i, j}, char}
```

<!-- livebook:{"branch_parent_index":1} -->

## Day 5

```elixir
example = """
47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
75|47
97|75
47|61
75|61
47|29
75|13
53|13

75,47,61,53,29
97,61,53,29,13
75,29,13
75,97,47,61,53
61,13,29
97,13,75,29,47
"""
```

```elixir
defmodule Day5 do
  def solve(input,:part1) do
    {rules,updates} = parse(input)

    updates
    |> Enum.filter(&valid?(&1,rules))
    |> Enum.map(&mid/1)
    |> Enum.sum()
  end

  def solve(input,:part2) do
    {rules,updates} = parse(input)

    updates
    |> Enum.reject(&valid?(&1,rules))
    |> Enum.map(&sort(&1,rules))
    |> Enum.map(&mid/1)
    |> Enum.sum()
  end

  def sort(update, rules) do
    Enum.sort(update, fn p1,p2 -> 
        case Map.get(rules,{p1,p2}) do
          nil -> true
          :gt -> true
          :lt -> false
        end 
      end)
  end

  def valid?(update, rules) do
    allpairs(update)
    |> Enum.all?(fn pair ->
        case Map.get(rules,pair) do
          nil -> true
          :gt -> true
          :lt -> false
        end
      end)
  end

  def allpairs(list) do
    list
    |> Enum.reduce({[],list}, fn 
      x, {result, [_|rest] } -> {[allpairs(x,rest) | result], rest}
    end)
    |> then(fn {result,_} -> result end)
    |> List.flatten()
  end
  def allpairs(elem,list) do
    list
    |> Enum.map(fn x -> {elem,x} end)
  end

  defp mid(list) do
    Enum.at(list, div(Enum.count(list) - 1, 2) )
  end

  def parse(input) do
    [rules,updates] = String.split(input,"\n\n",parts: 2,trim: true)
    {rules |> parse(:rules), updates |> parse(:updates)}
  end
  def parse(input,:rules) do
    input
    |> String.split(["\n","|"], trim: true)
    |> Enum.map(&String.to_integer/1)
    |> Enum.chunk_every(2)
    |> Enum.flat_map(fn [p1,p2] -> 
        [{ {p1,p2}, :gt }, { {p2,p1}, :lt }]
      end)
    |> Enum.into(%{})
  end
  def parse(input,:updates) do
    input
    |> String.split("\n",trim: true)
    |> Enum.map(&String.split(&1,","))
    |> Enum.map(fn x -> Enum.map(x,&String.to_integer/1) end)
  end
end
```

```elixir
example |> Day5.solve(:part1)
```

```elixir
Input.for_day(5) |> Day5.solve(:part1)
```

```elixir
example |> Day5.solve(:part2)
```

```elixir
Input.for_day(5) |> Day5.solve(:part2)
```

#### Learning from others

* using `libgraph` [link](https://github.com/Aetherus/advent-of-code/blob/60b58f9a2660e8233b8fa3a997adc81517d758f6/2024/day-05.livemd)

<!-- livebook:{"branch_parent_index":1} -->

## Day 6

```elixir
example = """
....#.....
.........#
..........
..#.......
.......#..
..........
.#..^.....
........#.
#.........
......#...
"""
```

```elixir
defmodule Day6 do
  def solve(input,:part1) do
    obstacles = parse(input,{0,0},%{})
      |> obstacles_with_directions()

    move(Map.get(obstacles,:guard),:north,obstacles,[])
    |> Stream.flat_map(fn {_dir,from,to} -> cells(from,to) end)
    |> Enum.uniq()
    |> Enum.count()
  end

  def solve(input,:part2) do
    obstacles = parse(input,{0,0},%{})
    obswithdir = obstacles |> obstacles_with_directions()

    potentials = move(Map.get(obswithdir,:guard),:north,obswithdir,[])
      |> Stream.flat_map(fn {_dir,from,to} -> cells(from,to) end)
      |> Enum.uniq()

    loops = for newobs <- potentials do
      obswithdir = obstacles |> add_obstacle(newobs) |> obstacles_with_directions()
      case move(Map.get(obswithdir,:guard),:north,obswithdir,[]) do
        :looping -> 1
        _ -> 0
      end
    end

    loops |> Enum.sum()
  end

  def add_obstacle(obstacles,{x,y}) do
    obstacles
      |> Map.update({:row,y}, [x], fn cur -> [x|cur] end)
      |> Map.update({:col,x}, [y], fn cur -> [y|cur] end)
  end

  def move(pos,dir,obstacles,visited) do
    case before_next_obstacle(pos,dir,obstacles) do
      {:edge,edge} -> [{dir,pos,edge}|visited]
      {:obstacle,nextpos} -> 
        cond do
          {dir,pos,nextpos} in visited -> :looping
          :else -> move(nextpos,turn_right(dir),obstacles,[{dir,pos,nextpos}|visited]) 
        end
    end
  end

  def cells({xfrom,yfrom},{xto,yto}) do
    xstep = if xfrom < xto, do: 1, else: -1
    ystep = if yfrom < yto, do: 1, else: -1

    for x <- Range.new(xfrom,xto,xstep), y <- Range.new(yfrom,yto,ystep) do
      {x,y}
    end
  end

  def turn_right(dir) do
    case dir do
      :north -> :east
      :east -> :south
      :south -> :west
      :west -> :north
    end
  end

  def before_next_obstacle({x,y},direction,obstacles) do
    pos = case direction do
      :north -> Map.get(obstacles,{:col,x,:north},[]) |> Enum.find(fn o -> o < y end)
      :south -> Map.get(obstacles,{:col,x,:south},[]) |> Enum.find(fn o -> o > y end)
      :east -> Map.get(obstacles,{:row,y,:east},[]) |> Enum.find(fn o -> o > x end)
      :west -> Map.get(obstacles,{:row,y,:west},[]) |> Enum.find(fn o -> o < x end)
    end

    case {pos,direction} do
      {nil,dir} when dir in [:south] -> {:edge, {x,Map.get(obstacles,:rows)-1}}
      {nil,dir} when dir in [:north] -> {:edge, {x,0}}
      {nil,dir} when dir in [:west] -> {:edge, {0,y}}
      {nil,dir} when dir in [:east] -> {:edge, {Map.get(obstacles,:cols)-1,y}}
      {pos,dir} when dir in [:north] -> {:obstacle,{x,pos+1}}
      {pos,dir} when dir in [:south] -> {:obstacle,{x,pos-1}}
      {pos,dir} when dir in [:east] -> {:obstacle,{pos-1,y}}
      {pos,dir} when dir in [:west] -> {:obstacle,{pos+1,y}}
    end
  end

  def obstacles_with_directions(obs) do
    obs |> Enum.flat_map(fn 
        {{:row,n},val} -> [
            {{:row,n,:east},Enum.sort(val,:asc)},
            {{:row,n,:west},Enum.sort(val,:desc)}
        ]

        {{:col,n},val} -> [
            {{:col,n,:north},Enum.sort(val,:desc)},
            {{:col,n,:south},Enum.sort(val,:asc)}
          ]
        other -> [other] 
      end)
    |> Enum.into(%{})
  end

  def parse(<<>>,{_x,y},acc) do
    acc |> Map.put(:rows,y)
  end 
  def parse("\n" <> rest,{x,y},acc), do: parse(rest, {0,y+1}, acc |> Map.put(:cols,x))
  def parse("." <> rest,{x,y},acc), do: parse(rest,{x+1,y},acc)
  def parse("#" <> rest,{x,y},acc) do
    acc = acc
      |> Map.update({:row,y}, [x], fn cur -> [x|cur] end)
      |> Map.update({:col,x}, [y], fn cur -> [y|cur] end)
    
    parse(rest,{x+1,y},acc)
  end
  def parse("^" <> rest,{x,y},acc) do
    acc = Map.put(acc,:guard,{x,y})
    parse(rest,{x+1,y},acc)
  end
end
```

```elixir
example |> Day6.solve(:part1)
```

```elixir
Input.for_day(6) |> Day6.solve(:part1)
```

```elixir
example |> Day6.solve(:part2)
```

```elixir
Input.for_day(6) |> Day6.solve(:part2)
```

<!-- livebook:{"branch_parent_index":1} -->

## Day 7

```elixir
example = """
190: 10 19
3267: 81 40 27
83: 17 5
156: 15 6
7290: 6 8 6 15
161011: 16 10 13
192: 17 8 14
21037: 9 7 18 13
292: 11 6 16 20
"""
```

```elixir
defmodule Day7 do
  def solve(input,:part1) do
    input
    |> parse()
    |> Enum.map(fn x -> find_options(x,[&(+/2),&(*/2)]) end)
    |> Enum.reduce(0, fn 
      [],acc -> acc
      elem,acc -> hd(elem) + acc
    end)
  end

  def solve(input,:part2) do
    input
    |> parse()
    |> Enum.map(fn x -> find_options(x,[&(+/2),&(*/2),&join/2]) end)
    |> Enum.reduce(0, fn 
      [],acc -> acc
      elem,acc -> hd(elem) + acc
    end)
  end

  def join(a,b), do: "#{a}#{b}" |> String.to_integer()
  
  def find_options([result|operands], operations) do
    calculate(result,operands,operations)
      |> List.flatten()
      |> Enum.filter(fn x -> x == result end)
  end

  def calculate(_max,[a,b],operations) do
    for o <- operations do
      o.(a,b)
    end
  end
  def calculate(max,[a,b|operands],operations) do
    for o <- operations do
      case o.(a,b) do
        x when x > max -> :too_large
        x -> calculate(max, [x|operands],operations)
      end
    end
  end

  def parse(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn x -> 
        String.split(x,[":"," "], trim: true)
        |> Enum.map(&String.to_integer/1)
      end)
  end
  
end
```

```elixir
example |> Day7.solve(:part1)
```

```elixir
Input.for_day(7) |> Day7.solve(:part1)
```

```elixir
example |> Day7.solve(:part2)
```

```elixir
Input.for_day(7) |> Day7.solve(:part2)
```

```elixir
105517128211543
```
