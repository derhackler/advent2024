# Advent 2024

```elixir
Mix.install([
  {:req, "~> 0.5.8"}
])
```

## Introduction

To run, set the SESSION livebook variable to the value of the session cookie that you find on the advent of code homepage.

## Utils

```elixir
defmodule Input do
  def for_day(day) do
    fname = Path.join(__DIR__,"day#{dayformat(day)}.txt")
    
    if (File.exists?(fname)) do
      File.read!(fname)
    else
      headers = [cookie: "session=" <> System.get_env("LB_SESSION")]
      input = Req.get!("https://adventofcode.com/2024/day/#{day}/input",headers: headers).body
      File.write!(fname,input)
      input
    end
  end

  defp dayformat(day) when day < 10, do: "0#{day}"
  defp dayformat(day), do: "#{day}"
    
end
```

<!-- livebook:{"branch_parent_index":1} -->

## Day 1

```elixir
example = """
3   4
4   3
2   5
1   3
3   9
3   3
"""
```

```elixir
defmodule Day1 do
  def solve(input, :part1) do
    {l1,l2} = parse(input)
    l1 = Enum.sort(l1)
    l2 = Enum.sort(l2)

    Enum.zip(l1,l2)
    |> Enum.map(fn {a,b} -> abs(a-b) end)
    |> Enum.sum()
  end

  def solve(input, :part2) do
    {l1,l2} = parse(input)
    freq = Enum.frequencies(l2)
    Enum.reduce(l1,0,fn a,acc -> acc + a * Map.get(freq,a,0) end)
  end

  def parse(input) do
    {l1,l2} = input
    |> String.split("\n", trim: true)
    |> Enum.map(&String.split(&1, " ", trim: true))
    |> Enum.reduce({[],[]},fn [a,b], {lista,listb} -> {[a|lista], [b|listb]} end)

    {l1 |> Enum.map(&String.to_integer/1), l2 |> Enum.map(&String.to_integer/1)}
  end
end
```

```elixir
example |> Day1.solve(:part1)
```

```elixir
Input.for_day(1) |> Day1.solve(:part1)
```

```elixir
example |> Day1.solve(:part2)
```

```elixir
Input.for_day(1) |> Day1.solve(:part2)
```

#### Better solutions (after I've completed mine):

* Use of `Enum.unzip` [link](https://github.com/evertvanaart/advent2024/blob/main/lib/solutions/day01/common.ex)
* Just multiplying frequencies directly [link](https://github.com/evertvanaart/advent2024/blob/main/lib/solutions/day01/day01b.ex)

<!-- livebook:{"branch_parent_index":1} -->

## Day 2

```elixir
example = """
7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9
"""
```

```elixir
defmodule Day2 do
  def solve(input, :part1) do
    parse(input)
    |> Stream.filter(fn report -> valid?(:unknown, hd(report), true, tl(report) ) end)
    |> Enum.count()
  end

  def solve(input, :part2) do
    parse(input)
    |> Stream.filter(&valid_with_dampening?/1)
    |> Enum.count()
  end



  def valid?(direction, prev, valid?, report)
  def valid?(_direction,_prev,valid?,[]), do: valid?
  def valid?(_direction,_prev,false,_), do: false
  def valid?(direction,prev,_valid?,[num|rest]) do
    case direction do
      :unknown -> valid?(direction(prev,num),num,valid_difference?(prev,num),rest)
      :asc -> valid?(:asc,num,valid_difference?(prev,num) && prev < num, rest)
      :desc -> valid?(:desc,num,valid_difference?(prev,num) && prev > num, rest)
    end
  end

  def valid_with_dampening?(report) do
    attempts = length(report)
    Enum.reduce_while(0..attempts - 1, false, fn attempt, _acc -> 
        report = remove_idx(report,attempt)
        case valid?(:unknown,hd(report),true,tl(report)) do
          true -> {:halt, true}
          false -> {:cont, false}
        end
    end)
  end

  defp remove_idx(enum, idx) do
    {a,b} = Enum.split(enum,idx)
    a ++ Enum.drop(b,1)
  end

  defp direction(val1,val2) do
    cond do
      val1 > val2 -> :desc
      val2 > val1 -> :asc
      :else -> :unknown
    end
  end

  def valid_difference?(val1,val2) do
    abs(val1 - val2) < 4 && abs(val1 - val2) != 0
  end
  

  def parse(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(&String.split/1)
    |> Enum.map(fn nums ->
        Enum.map(nums,&String.to_integer/1)
      end)
  end
end
```

```elixir
example |> Day2.solve(:part1)
```

```elixir
Input.for_day(2) |> Day2.solve(:part1)
```

```elixir
example |> Day2.solve(:part2)
```

```elixir
Input.for_day(2) |> Day2.solve(:part2)
```

#### Learning from others

* There exists a `List.delete_at` function...
* It's possible to pipe into a `case` statement. [link](https://elixirforum.com/t/advent-of-code-2024-day-2/67804/5)

## Day 3

```elixir
example = "xmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))"
```

```elixir
defmodule Day3 do
  def solve(input,:part1) do
    parse(input,:mul,[],[])
    |> Enum.map(fn 
      [a,b] -> a*b
      _other -> 0
    end)
    |> Enum.sum()
  end

  def solve(input, :part2) do
    input
    |> parse(:mul,[],[])
    |> Enum.reverse()
    |> Enum.reduce({:do,[]}, fn 
      :do,{_,nums} -> {:do,nums}
      :dont,{_,nums} -> {:dont,nums}
      _elem,{:dont,nums} -> {:dont,nums}
      elem,{:do,nums} -> {:do,[elem|nums]}
    end)
    |> then(fn {_,nums} -> nums end)
    |> Enum.map(fn [a,b] -> a*b end)
    |> Enum.sum()
  end

  # grammar: :mul,:int,:comma_or_brace,:int,:comma_or_brace

  def parse("mul(" <> rest,:mul,_temp,acc), do: parse(rest, :int, [], acc)
  def parse("do()" <> rest,:mul,_temp,acc), do: parse(rest, :mul, [], [:do|acc])
  def parse("don't()" <> rest, :mul,_temp,acc), do: parse(rest, :mul, [], [:dont|acc])
  
  def parse(val,:int, temp, acc) do
    case Integer.parse(val) do
      :error -> parse(val, :mul, [], acc)
      {num,rest} when num < 1000 and num >= 0 -> parse(rest, :comma_or_brace, [num|temp], acc)
      {_num,rest} -> parse(rest, :mul, [], acc)
    end
  end
  
  def parse("," <> rest,:comma_or_brace,[_num]=temp,acc), do: parse(rest, :int, temp, acc)
  def parse(")" <> rest,:comma_or_brace,[_num,_num2]=temp,acc), do: parse(rest, :mul, [], [temp|acc])

  def parse(<<_something_unexpected, rest::binary>>,_any,_temp,acc), do: parse(rest, :mul, [], acc)
  def parse("",_,_,acc), do: acc

end
```

```elixir
example |> Day3.solve(:part1)
```

```elixir
Input.for_day(3) |> Day3.solve(:part1)
```

```elixir
example = "xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))"
example |> Day3.solve(:part2)
```

```elixir
Input.for_day(3) |> Day3.solve(:part2)
```

#### Learning from others

* `Regex.scan(~r/mul\((\d{1,3}),(\d{1,3})\)/, input, capture: :all_but_first)` using `:all_but_first` to get only the groups and not the full match. [link](https://elixirforum.com/t/advent-of-code-2024-day-3/67837/2)

* `(?<=mul\()` Regex look behind group that does not get catpured. [link](https://elixirforum.com/t/advent-of-code-2024-day-3/67837/5)

* Very nice solution using nimble parse. [link](https://elixirforum.com/t/advent-of-code-2024-day-3/67837/22)

* Elegant regex based using `Regex.scan` [link](https://elixirforum.com/t/advent-of-code-2024-day-3/67837/49)
